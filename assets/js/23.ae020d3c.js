(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{516:function(a,t,e){"use strict";e.r(t);var r=e(2),_=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"webpack-打包原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包原理"}},[a._v("#")]),a._v(" webpack 打包原理")]),a._v(" "),e("h3",{attrs:{id:"什么是-webpack-？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-webpack-？"}},[a._v("#")]),a._v(" 什么是 webpack ？")]),a._v(" "),e("p",[a._v("本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器。当 webpack 处理应用程序时，他会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")]),a._v(" "),e("h3",{attrs:{id:"核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[a._v("#")]),a._v(" 核心概念")]),a._v(" "),e("ul",[e("li",[a._v("Entry： 入口，作为构建内部依赖图的开始")]),a._v(" "),e("li",[a._v("Output ：输出， 输出目录及其命名 默认为 ./dist")]),a._v(" "),e("li",[a._v("Module： 模块， webpack 里 一切皆模块，一个模块对应一个文件。Webpack  会从配置的 Entry 开始递归找出所有依赖的模块。")]),a._v(" "),e("li",[a._v("Chunk： 代码块， 一个 Chunk 由多个模块组合而成，用于代码合并与分割。")]),a._v(" "),e("li",[a._v("Loader： 模块转换器，让 webpack 能够处理那些非 JavaScript 文件（由于webpack 自身只理解 JavaScript ）")]),a._v(" "),e("li",[a._v("Plugin： 插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])]),a._v(" "),e("h3",{attrs:{id:"构建流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建流程"}},[a._v("#")]),a._v(" 构建流程")]),a._v(" "),e("ol",[e("li",[a._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。")]),a._v(" "),e("li",[a._v("开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。")]),a._v(" "),e("li",[a._v("确定入口：根据配置中的 entry 找出所有的入口文件。")]),a._v(" "),e("li",[a._v("编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。")]),a._v(" "),e("li",[a._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")]),a._v(" "),e("li",[a._v("输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。")]),a._v(" "),e("li",[a._v("输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。")])]),a._v(" "),e("h3",{attrs:{id:"流程细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程细节"}},[a._v("#")]),a._v(" 流程细节")]),a._v(" "),e("p",[a._v("构建流程可分为三大阶段：")]),a._v(" "),e("ol",[e("li",[a._v("初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。")]),a._v(" "),e("li",[a._v("编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。")]),a._v(" "),e("li",[a._v("输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。")])]),a._v(" "),e("p",[a._v("如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程如下：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://webpack.wuhaolin.cn/5%E5%8E%9F%E7%90%86/img/5-1%E7%9B%91%E5%90%AC%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png",alt:""}})]),a._v(" "),e("p",[a._v("在每个大阶段中又会发生很多事件，Webpack 会把这些事件广播出来供给 Plugin 使用")]),a._v(" "),e("h3",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[a._v("#")]),a._v(" 优化")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("缩小文件搜索范围")])]),a._v(" "),e("li",[e("p",[a._v("压缩代码")]),a._v(" "),e("p",[a._v("可以通过 GZIP 算法对文件压缩，还可以对文本本身进行压缩（对文本本身进行压缩的作用除了有提升网页加载速度的优势外，还具有混淆源码的作用。 由于压缩后的代码可读性非常差，就算别人下载到了网页的代码，也大大增加了代码分析和改造的难度。）")]),a._v(" "),e("p",[a._v("压缩 js "),e("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer"}},[a._v("UglifyJS"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("压缩 css "),e("a",{attrs:{href:"http://cssnano.co/",target:"_blank",rel:"noopener noreferrer"}},[a._v("cssnano"),e("OutboundLink")],1)])]),a._v(" "),e("li",[e("p",[a._v("开启模块热替换")]),a._v(" "),e("p",[a._v("当一个源码发生变化时，只重新编译发生变化的模块，再用新输出的模块替换掉浏览器中对应的老模块。")])]),a._v(" "),e("li",[e("p",[a._v("CDN 加速")]),a._v(" "),e("p",[a._v("CDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。")])])]),a._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("Webpack 是一个庞大的 Node.js 应用，如果你阅读过它的源码，你会发现实现一个完整的 Webpack 需要编写非常多的代码。 但你无需了解所有的细节，只需了解其整体架构和部分细节即可。")]),a._v(" "),e("p",[a._v("对 Webpack 的使用者来说，它是一个简单强大的工具； 对 Webpack 的开发者来说，它是一个扩展性的高系统。")]),a._v(" "),e("p",[a._v("Webpack 之所以能成功，在于它把复杂的实现隐藏了起来，给用户暴露出的只是一个简单的工具，让用户能快速达成目的。 同时整体架构设计合理，扩展性高，开发扩展难度不高，通过社区补足了大量缺失的功能，让 Webpack 几乎能胜任任何场景。")]),a._v(" "),e("h3",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[a._v("#")]),a._v(" 资料")]),a._v(" "),e("p",[e("a",{attrs:{href:"http://webpack.wuhaolin.cn/",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入浅出 Webpack"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/6844904038543130637",target:"_blank",rel:"noopener noreferrer"}},[a._v("掘金"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=_.exports}}]);